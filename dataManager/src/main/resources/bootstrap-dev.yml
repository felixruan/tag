server:
  port: 18072
  host: localhost
spring:
  application:
    name: tag-etocrm-dataManager-server
  main:
    allow-bean-definition-overriding: true
  cloud:
    nacos:
      discovery:
        server-addr: 10.100.20.243:8848
        namespace: 74a80991-83ec-4012-a0d8-bcf399ed4da4
      config:
        file-extension: yml
        server-addr: 10.100.20.243:8848
        group: DEV
        namespace: 74a80991-83ec-4012-a0d8-bcf399ed4da4
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://10.100.20.113:4000/tag_dev?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&useSSL=false
    username: dev_root
    password: $x:wM.6h>gcS
    type: com.alibaba.druid.pool.DruidDataSource
    filters: stat,slf4j
    initialSize: 10
    initialization-mode: always
    maxActive: 200
    maxPoolPreparedStatementPerConnectionSize: 20
    maxWait: 10000
    minEvictableIdleTimeMillis: 30000
    minIdle: 20
    poolPreparedStatements: true
    testOnBorrow: false
    testOnReturn: false
    testWhileIdle: true
    timeBetweenEvictionRunsMillis: 20000
    validationQuery: select 'x'
    druid:
      filter:
        wall:
          config:
            multi-statement-allow: true
  redis:
    database: 0
    host: 10.100.20.243
    port: 6379
    password: 123456
  kafka:
    bootstrap-servers: 10.100.20.241:9092,10.100.20.242:9092
    listener:
       ack-mode: manual
       missing-topics-fatal: true
    producer:
      batch-size: 16384
      retries: 0
      buffer-memory: 33554432
      #1M 默认1M
      max-request-size: 1048576
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.ByteArraySerializer
    consumer:
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer
      enable-auto-commit: false
  # batch
  batch:
    job:
      # 默认自动执行定义的Job(true)，改为false，需要jobLaucher.run执行
      enabled: false
      # spring batch在数据库里面创建默认的数据表，如果不是always则会提示相关表不存在
      initialize-schema: always
xxl:
  job:
    # 执行器通讯TOKEN [选填]：非空时启用；
    access-token: etocrm@2020etocrmjob
    admin:
      # 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      address: http://jobserver-tag-sit.etocrm.net/etocrm-job-admin
    executor:
      # 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      app-name: data-job-executor-java
      # 执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip:
      # 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，单机部署多个执行器时，注意要配置不同执行器端口；
      port: 9994
      # 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      log-path: /data/applogs/xxl-job/jobhandler
      # 执行器日志保存天数 [选填] ：值大于3时生效，启用执行器Log文件定期清理功能，否则不生效；
      log-retention-days: -1
  base:
    uri: http://jobserver-tag-sit.etocrm.net/etocrm-job-admin
    job_info_uri: /jobinfo
    job_group_uri: /jobgroup
    job_user_name: admin
    job_pass_word: 123456
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 60000 # 5s,路由转发时HystrixCommand的执行超时时间，执行超过该时间会进行服务降级处理
ribbon:
  ###指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间。
  ReadTimeout: 50000
  ###指的是建立连接后从服务器读取到可用资源所用的时间。
  ConnectTimeout: 50000
knife4j:
  production: false
feign:
  hystrix:
    enabled: true
logging:
  config: 'classpath:logback-spring.xml'
  level:
    mapper: debug
    org:
      mybatis: debug
#ETL:
#  MAX_NUMBER: 10000
#  DELETETOTAL: 10000
#  QUERY:
#    MAX_NUMBER: 20000
CUSTOM:
  KAFKA:
    TOPIC:
      ETL_BRANDS_TOPIC: ETL_DEV_BRANDS
      ETL_TABLE_TOPIC: ETL_DEV_TABLE
      ETL_DATA_TOPIC: ETL_DEV_DATA
      ETL_DATA_BATCH_TOPIC: ETL_DATA_BATCH
      ETL_CANAL_INSTALL: ETL_CANAL_INSTALL
      ETL_CANAL_DELETE: ETL_CANAL_DELETE
      ETL_CANAL_UPDATE: ETL_CANAL_UPDATE
      ETL_PROCESSING: ETL_PROCESSING
      ETL_PROCESSING_TABLE: ETL_PROCESSING_TABLE
      ETL_PROCESSING_UPDATE: ETL_PROCESSING_UPDATE
      YOUNGOR_TAG_TOPIC: YOUNGOR_TAG_TOPIC
    GROUP:
      ETL_GROUP: ETL_GROUP
      ETL_PROCESSING_GROUP: ETL_PROCESSING_GROUP
      YOUNGOR_GROUP: YOUNGOR_GROUP
    PARTITION: 0